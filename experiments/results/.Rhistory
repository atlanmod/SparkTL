library(ggplot2)
library(dplyr)
colTypes <- rep("numeric",14)
data <- read.csv(file="x2_4partitions_Jul_1WE.csv", colClasses=colTypes, comment.char = "#")
raw_df <- data.frame(data)
df <- raw_df %>%
group_by(element, link, executor, core, partition,sleeping_guard,sleeping_instantiate,sleeping_apply) %>%
summarise(count=length(total_time),total_time.mean = mean(total_time), total_time.sd = sd(total_time), total_time.median = median(total_time),
time_tuples.mean = mean(time_tuples), time_tuples.sd = sd(time_tuples), time_tuples.median = median(time_tuples),
time_instantiate.mean = mean(time_instantiate), time_instantiate.sd = sd(time_instantiate), time_instantiate.median = median(time_instantiate),
time_extract.mean = mean(time_extract), time_extract.sd = sd(time_extract), time_extract.median = median(time_extract),
time_broadcast.mean = mean(time_broadcast), time_broadcast.sd = sd(time_broadcast), time_broadcast.median = median(time_broadcast),
time_apply.mean = mean(time_apply), time_apply.sd = sd(time_apply), time_apply.median = median(time_apply))
#(df <- df[order(df$sleeping_guard), ])
size = unique(df$element)
sleeping_times = unique(df$sleeping_guard)
df.with_speedups  <- NULL
for (j in size) {
for(i in sleeping_times){
df.size <- df%>%filter(element == j)
df.size$total_cores = df.size$core * df.size$executor
df.sleeping <- df.size %>% filter(sleeping_guard == i)
df.sleeping$sleeping_time <- df.sleeping$sleeping_guard
df.sleeping = subset(df.sleeping, select = -c(sleeping_guard, sleeping_instantiate, sleeping_apply))
ref_value = df.sleeping %>% filter(partition == min(df.sleeping$partition))
ref_value.total_time = ref_value$total_time.mean
ref_value.time_instantiate = ref_value$time_instantiate.mean
ref_value.time_apply = ref_value$time_apply.mean
df.sleeping["total_time.speedup"] =  ref_value.total_time / df.sleeping$total_time.mean
df.sleeping["time_instantiate.speedup"] =  ref_value.time_instantiate / df.sleeping$time_instantiate.mean
df.sleeping["time_apply.speedup"] =  ref_value.time_apply / df.sleeping$time_apply.mean
df.toprint = subset(df.sleeping, select = c(sleeping_time,element,link,executor,core,total_cores,partition,count,total_time.speedup,time_instantiate.speedup,time_apply.speedup))
#print(df.toprint)
if (is.null(df.with_speedups )) {
df.with_speedups  = df.toprint
}else {
df.with_speedups  = rbind.data.frame(df.with_speedups , df.toprint)
}
}
}
ggplot(data=df.with_speedups, aes(x=total_cores,y=total_time.speedup,group=as.factor(sleeping_time),color=as.factor(sleeping_time))) +
geom_line() + geom_point() + labs(fill = "") + geom_segment(aes(x = 8, y = 1, xend = 32, yend = 4),  color="black", linetype="dashed") +
theme(legend.key.size = unit(0.5, 'cm')) + theme(legend.position = "top") + xlab("number of cores") + ylab("relative speedup") + scale_color_discrete(name="Simulated computation time (ms)") +
guides(colour =guide_legend(title.position="top", title.hjust = 0.5),
size = guide_legend(title.position="top", title.hjust = 0.5))
ggsave("x2_sleepins.pdf",width = 4, height = 4)
ggsave("x2_sleepins.pdf",width = 4, height = 4)
library(ggplot2)
library(dplyr)
colTypes <- rep("numeric",14)
data <- read.csv(file="x2_4partitions_Jul_1WE.csv", colClasses=colTypes, comment.char = "#")
raw_df <- data.frame(data)
df <- raw_df %>%
group_by(element, link, executor, core, partition,sleeping_guard,sleeping_instantiate,sleeping_apply) %>%
summarise(count=length(total_time),total_time.mean = mean(total_time), total_time.sd = sd(total_time), total_time.median = median(total_time),
time_tuples.mean = mean(time_tuples), time_tuples.sd = sd(time_tuples), time_tuples.median = median(time_tuples),
time_instantiate.mean = mean(time_instantiate), time_instantiate.sd = sd(time_instantiate), time_instantiate.median = median(time_instantiate),
time_extract.mean = mean(time_extract), time_extract.sd = sd(time_extract), time_extract.median = median(time_extract),
time_broadcast.mean = mean(time_broadcast), time_broadcast.sd = sd(time_broadcast), time_broadcast.median = median(time_broadcast),
time_apply.mean = mean(time_apply), time_apply.sd = sd(time_apply), time_apply.median = median(time_apply))
#(df <- df[order(df$sleeping_guard), ])
size = unique(df$element)
sleeping_times = unique(df$sleeping_guard)
df.with_speedups  <- NULL
for (j in size) {
for(i in sleeping_times){
df.size <- df%>%filter(element == j)
df.size$total_cores = df.size$core * df.size$executor
df.sleeping <- df.size %>% filter(sleeping_guard == i)
df.sleeping$sleeping_time <- df.sleeping$sleeping_guard
df.sleeping = subset(df.sleeping, select = -c(sleeping_guard, sleeping_instantiate, sleeping_apply))
ref_value = df.sleeping %>% filter(partition == min(df.sleeping$partition))
ref_value.total_time = ref_value$total_time.mean
ref_value.time_instantiate = ref_value$time_instantiate.mean
ref_value.time_apply = ref_value$time_apply.mean
df.sleeping["total_time.speedup"] =  ref_value.total_time / df.sleeping$total_time.mean
df.sleeping["time_instantiate.speedup"] =  ref_value.time_instantiate / df.sleeping$time_instantiate.mean
df.sleeping["time_apply.speedup"] =  ref_value.time_apply / df.sleeping$time_apply.mean
df.toprint = subset(df.sleeping, select = c(sleeping_time,element,link,executor,core,total_cores,partition,count,total_time.speedup,time_instantiate.speedup,time_apply.speedup))
#print(df.toprint)
if (is.null(df.with_speedups )) {
df.with_speedups  = df.toprint
}else {
df.with_speedups  = rbind.data.frame(df.with_speedups , df.toprint)
}
}
}
ggplot(data=df.with_speedups, aes(x=total_cores,y=total_time.speedup,group=as.factor(sleeping_time),color=as.factor(sleeping_time))) +
geom_line() + geom_point() + labs(fill = "") + geom_segment(aes(x = 8, y = 1, xend = 32, yend = 4),  color="black", linetype="dashed") +
theme(legend.key.size = unit(0.5, 'cm')) + theme(legend.position = "top") + xlab("number of cores") + ylab("relative speedup") + scale_color_discrete(name="Introduced simulated computation time on phases (ms)") +
guides(colour =guide_legend(title.position="top", title.hjust = 0.5),
size = guide_legend(title.position="top", title.hjust = 0.5))
ggsave("x2_sleeping.pdf",width = 4, height = 4)
ggplot(data=df.with_speedups, aes(x=total_cores,y=total_time.speedup,group=as.factor(sleeping_time),color=as.factor(sleeping_time))) +
geom_line() + geom_point() + labs(fill = "") + geom_segment(aes(x = 8, y = 1, xend = 32, yend = 4),  color="black", linetype="dashed") +
theme(legend.key.size = unit(0.5, 'cm')) + theme(legend.position = "top") + xlab("number of cores") + ylab("relative speedup") + scale_color_discrete(name="Introduced simulated computation\n time on phases (ms)") +
guides(colour =guide_legend(title.position="top", title.hjust = 0.5),
size = guide_legend(title.position="top", title.hjust = 0.5))
ggsave("x2_sleeping.pdf",width = 4, height = 4)
packages <- c("ggplot2", "dplyr")
install.packages(setdiff(packages, rownames(installed.packages())))
library(ggplot2)
library(dplyr)
packages <- c("ggplot2", "dplyr")
install.packages(setdiff(packages, rownames(installed.packages())))
library(ggplot2)
library(dplyr)
colTypes <- rep("numeric",14)
data <- read.csv(file="x2_x4_4partitions_Jul_1WE.csv", colClasses=colTypes, comment.char = "#")
colTypes <- rep("numeric",14)
data <- read.csv(file="x2_x4_4partitions_Jul_1WE.csv", colClasses=colTypes, comment.char = "#")
raw_df <- data.frame(data)
df <- raw_df %>%
group_by(element, link, executor, core, partition,sleeping_guard,sleeping_instantiate,sleeping_apply) %>%
summarise(count=length(total_time),total_time.mean = mean(total_time), total_time.sd = sd(total_time), total_time.median = median(total_time),
time_tuples.mean = mean(time_tuples), time_tuples.sd = sd(time_tuples), time_tuples.median = median(time_tuples),
time_instantiate.mean = mean(time_instantiate), time_instantiate.sd = sd(time_instantiate), time_instantiate.median = median(time_instantiate),
time_extract.mean = mean(time_extract), time_extract.sd = sd(time_extract), time_extract.median = median(time_extract),
time_broadcast.mean = mean(time_broadcast), time_broadcast.sd = sd(time_broadcast), time_broadcast.median = median(time_broadcast),
time_apply.mean = mean(time_apply), time_apply.sd = sd(time_apply), time_apply.median = median(time_apply))
#(df <- df[order(df$sleeping_guard), ])
size = unique(df$element)
sleeping_times = unique(df$sleeping_guard)
df.with_speedups  <- NULL
for (j in size) {
for(i in sleeping_times){
df.size <- df%>%filter(element == j)
df.size$total_cores = df.size$core * df.size$executor
df.sleeping <- df.size %>% filter(sleeping_guard == i)
df.sleeping$sleeping_time <- df.sleeping$sleeping_guard
df.sleeping = subset(df.sleeping, select = -c(sleeping_guard, sleeping_instantiate, sleeping_apply))
ref_value = df.sleeping %>% filter(partition == min(df.sleeping$partition))
ref_value.total_time = ref_value$total_time.mean
ref_value.time_instantiate = ref_value$time_instantiate.mean
ref_value.time_apply = ref_value$time_apply.mean
df.sleeping["total_time.speedup"] =  ref_value.total_time / df.sleeping$total_time.mean
df.sleeping["time_instantiate.speedup"] =  ref_value.time_instantiate / df.sleeping$time_instantiate.mean
df.sleeping["time_apply.speedup"] =  ref_value.time_apply / df.sleeping$time_apply.mean
df.toprint = subset(df.sleeping, select = c(sleeping_time,element,link,executor,core,total_cores,partition,count,total_time.speedup,time_instantiate.speedup,time_apply.speedup))
#print(df.toprint)
if (is.null(df.with_speedups )) {
df.with_speedups  = df.toprint
}else {
df.with_speedups  = rbind.data.frame(df.with_speedups , df.toprint)
}
}
}
df.with_speedups
df
